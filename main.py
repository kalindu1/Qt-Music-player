# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'main.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import *
from PyQt5.QtCore import QUrl
from PyQt5.QtMultimedia import QMediaPlayer, QMediaContent

from mutagen.mp3 import MP3
import sys
import time


mixer.init()

file = ""
playing = False
first_time_playing = True
Volume_value = 100
Song_time = 0
Song_current_time = 0


class Ui_mainWindow(object):
    def setupUi(self, mainWindow):
        global Volume_value
        global Song_time

        mainWindow.setObjectName("mainWindow")
        mainWindow.resize(570, 376)

        icon = QtGui.QIcon()
        icon.addPixmap(
            QtGui.QPixmap("Res/music player.ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off
        )

        mainWindow.setWindowIcon(icon)

        self.centralwidget = QtWidgets.QWidget(mainWindow)
        self.centralwidget.setObjectName("centralwidget")

        self.Play_button = QtWidgets.QPushButton(self.centralwidget)
        self.Play_button.setGeometry(QtCore.QRect(380, 210, 75, 71))
        self.Play_button.setText("")

        icon1 = QtGui.QIcon()
        icon1.addPixmap(
            QtGui.QPixmap("Res/play.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off
        )

        self.Play_button.setIcon(icon1)
        self.Play_button.setIconSize(QtCore.QSize(80, 80))
        self.Play_button.setDefault(True)
        self.Play_button.setObjectName("Play_button")

        self.Pause_button = QtWidgets.QPushButton(self.centralwidget)
        self.Pause_button.setGeometry(QtCore.QRect(290, 210, 75, 71))
        self.Pause_button.setText("")

        icon2 = QtGui.QIcon()
        icon2.addPixmap(
            QtGui.QPixmap("Res/pause.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off
        )

        self.Pause_button.setIcon(icon2)
        self.Pause_button.setIconSize(QtCore.QSize(80, 80))
        self.Pause_button.setDefault(True)
        self.Pause_button.setObjectName("Pause_button")

        self.Stop_button = QtWidgets.QPushButton(self.centralwidget)
        self.Stop_button.setGeometry(QtCore.QRect(470, 210, 75, 71))
        self.Stop_button.setText("")

        icon3 = QtGui.QIcon()
        icon3.addPixmap(
            QtGui.QPixmap("Res/stop.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off
        )

        self.Stop_button.setIcon(icon3)
        self.Stop_button.setIconSize(QtCore.QSize(80, 80))
        self.Stop_button.setDefault(True)
        self.Stop_button.setObjectName("Stop_button")

        self.Song_name = QtWidgets.QLabel(self.centralwidget)
        self.Song_name.setGeometry(QtCore.QRect(280, 160, 271, 31))

        font = QtGui.QFont()
        font.setFamily("Calibri")
        font.setPointSize(12)
        font.setBold(False)
        font.setWeight(50)
        font.setStrikeOut(False)

        self.Song_name.setFont(font)
        self.Song_name.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.Song_name.setFrameShadow(QtWidgets.QFrame.Plain)
        self.Song_name.setTextFormat(QtCore.Qt.AutoText)
        self.Song_name.setAlignment(QtCore.Qt.AlignCenter)
        self.Song_name.setObjectName("Song_name")

        self.listWidget = QtWidgets.QListWidget(self.centralwidget)
        self.listWidget.setGeometry(QtCore.QRect(10, 21, 256, 191))
        self.listWidget.setObjectName("listWidget")

        self.Add_button = QtWidgets.QPushButton(self.centralwidget)
        self.Add_button.setGeometry(QtCore.QRect(100, 230, 75, 61))

        font = QtGui.QFont()
        font.setFamily("Calibri")
        font.setPointSize(14)

        self.Add_button.setFont(font)
        self.Add_button.setAutoDefault(False)
        self.Add_button.setDefault(True)
        self.Add_button.setFlat(False)
        self.Add_button.setObjectName("Add_button")

        self.VolumeBar = QtWidgets.QSlider(self.centralwidget)
        self.VolumeBar.setGeometry(QtCore.QRect(370, 300, 101, 20))
        self.VolumeBar.setMaximum(100)
        self.VolumeBar.setOrientation(QtCore.Qt.Horizontal)
        self.VolumeBar.setObjectName("VolumeBar")

        self.SongProgress = QtWidgets.QSlider(self.centralwidget)
        self.SongProgress.setGeometry(QtCore.QRect(299, 130, 241, 20))
        self.SongProgress.setOrientation(QtCore.Qt.Horizontal)
        self.SongProgress.setObjectName("SongProgress")

        mainWindow.setCentralWidget(self.centralwidget)

        self.menubar = QtWidgets.QMenuBar(mainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 570, 21))
        self.menubar.setObjectName("menubar")

        self.menuFile = QtWidgets.QMenu(self.menubar)
        self.menuFile.setObjectName("menuFile")

        self.menuHelp = QtWidgets.QMenu(self.menubar)
        self.menuHelp.setObjectName("menuHelp")

        mainWindow.setMenuBar(self.menubar)

        self.statusbar = QtWidgets.QStatusBar(mainWindow)
        self.statusbar.setObjectName("statusbar")

        mainWindow.setStatusBar(self.statusbar)

        self.actionAbout_us = QtWidgets.QAction(mainWindow)
        self.actionAbout_us.setObjectName("actionAbout_us")

        self.actionHelp = QtWidgets.QAction(mainWindow)
        self.actionHelp.setObjectName("actionHelp")

        self.actionOpen = QtWidgets.QAction(mainWindow)
        self.actionOpen.setObjectName("actionOpen")

        self.actionExit = QtWidgets.QAction(mainWindow)
        self.actionExit.setObjectName("actionExit")

        self.menuFile.addAction(self.actionOpen)
        self.menuFile.addAction(self.actionExit)

        self.menuHelp.addAction(self.actionAbout_us)
        self.menuHelp.addAction(self.actionHelp)

        self.menubar.addAction(self.menuFile.menuAction())
        self.menubar.addAction(self.menuHelp.menuAction())

        self.retranslateUi(mainWindow)

        QtCore.QMetaObject.connectSlotsByName(mainWindow)

        print(file)

        # Check if the buttons are pressed

        self.Play_button.clicked.connect(self.Play_button_clicked)
        self.Pause_button.clicked.connect(self.Pause_button_clicked)
        self.Add_button.clicked.connect(self.Open_button_clicked)
        self.Stop_button.clicked.connect(self.Stop_button_clicked)

        # Actions in the menubar
        self.actionOpen.triggered.connect(lambda: self.Open_button_clicked())
        self.actionExit.triggered.connect(lambda: sys.exit())
        self.actionAbout_us.triggered.connect(lambda: self.About_us_button_clicked())
        self.actionHelp.triggered.connect(lambda: self.Help_button_clicked())

        # for the volume
        self.VolumeBar.setValue(100)
        self.VolumeBar.valueChanged.connect(self.Change_volume_value)

        # About the songs Progress
        self.SongProgress.valueChanged.connect(self.fast_forward)

        self.Player = QMediaPlayer()

        self.Player.positionChanged.connect(self.Get_current_time)

    ##########################################################################################################
    ##########################################################################################################

    def retranslateUi(self, mainWindow):
        _translate = QtCore.QCoreApplication.translate
        mainWindow.setWindowTitle(_translate("mainWindow", "MainWindow"))
        self.Song_name.setText(_translate("mainWindow", "Test"))
        self.Add_button.setText(_translate("mainWindow", "Add"))
        self.menuFile.setTitle(_translate("mainWindow", "File"))
        self.menuHelp.setTitle(_translate("mainWindow", "Help"))
        self.actionAbout_us.setText(_translate("mainWindow", "About us"))
        self.actionAbout_us.setStatusTip(_translate("mainWindow", "About us"))
        self.actionHelp.setText(_translate("mainWindow", "Help"))
        self.actionHelp.setStatusTip(_translate("mainWindow", "Help"))
        self.actionHelp.setShortcut(_translate("mainWindow", "Ctrl+H"))
        self.actionOpen.setText(_translate("mainWindow", "Open"))
        self.actionOpen.setStatusTip(_translate("mainWindow", "Open a file"))
        self.actionOpen.setShortcut(_translate("mainWindow", "Ctrl+O"))
        self.actionExit.setText(_translate("mainWindow", "Exit"))
        self.actionExit.setShortcut(_translate("mainWindow", "Ctrl+S"))

    #############################################################################################################
    #############################################################################################################

    ##############################################################################################################

    def fast_forward(self):
        val = self.SongProgress.value()
        val = val * 1000
        try:
            self.Player.setPosition(val)
        except:
            self.Song_name.setText("No file")

    ##############################################################################################################

    def Open_button_clicked(self):
        global file
        file = QFileDialog.getOpenFileName(None,None,None,"mp3(*.mp3)")

        #  call the get length of file function to get and set the file length to the progress bar
        self.Get_length_of_file()

    ##############################################################################################################

    def About_us_button_clicked(self):
        dialog = QMessageBox(mainWindow)
        dialog.setText("Hi, I'm Kalindu. I made this application. Hope you enjoy it.")
        dialog.setWindowTitle("About Us")
        dialog.setIcon(QMessageBox.Information)

        # icons types : crtitcal, warning, information, question

        dialog.exec_()

    ##############################################################################################################

    def Help_button_clicked(self):
        dialog = QMessageBox(mainWindow)
        dialog.setText("Load a song from open and click the play button.")
        dialog.setIcon(QMessageBox.Information)
        dialog.setWindowTitle("Help")
        dialog.exec_()

    #############################################################################################################

    def Pause_button_clicked(self):
        global playing

        if playing:
            self.Player.pause()
            playing = False
        else:
            # mixer.music.unpause()
            playing = True
            self.Player.play()

    ###############################################################################################################

    def Play_button_clicked(self):
        global file
        global playing
        global first_time_playing

        if playing == False and first_time_playing != True:
            self.Player.pause()
            playing = True

            try:
                self.Player.play()

            except:
                self.Song_name.setText("No file")

        else:
            try:
                Url = QUrl.fromLocalFile(file[0])
                content = QMediaContent(Url)

                self.Player.setMedia(content)
                self.Player.play()
                first_time_playing = False

            except:
                self.Song_name.setText("No file")


    ############################################################################################################

    def Stop_button_clicked(self):
        self.Player.stop()

    ###########################################################################################################

    # change the volume value and set it as the volume
    def Change_volume_value(self):
        global Volume_value

        Volume_value = self.VolumeBar.value()

        self.Player.setVolume(Volume_value)

    ############################################################################################################

    def Get_length_of_file(self):
        global file
        global Song_time

        try:
            audio = MP3(file[0])
            Song_time = audio.info.length

            #  Sets the Songs time to SongProgress
            self.SongProgress.setMaximum(int(Song_time))
        except:
            self.Song_name.setText("No file")




    ############################################################################################################

    def Get_current_time(self, i):
        global Song_time
        global playing

        # to set the correct value we have to devide it by 1000
        i = i/1000
        i = int(i)

        self.SongProgress.blockSignals(True)
        self.SongProgress.setValue(i)
        self.SongProgress.blockSignals(False)


############################################################################################################


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    mainWindow = QtWidgets.QMainWindow()
    ui = Ui_mainWindow()
    ui.setupUi(mainWindow)

    mainWindow.show()
    sys.exit(app.exec_())
